###############################################################################
# Author:  Thomas Volkert
# Since:   2012-02-10
###############################################################################

##############################################################
# Default target executed when no arguments are given to make.

default_target: debug
.PHONY : debug

##############################################################
# define build variables

BUILD_DIR=Build
BUILD_DIR_RELEASE32=$(BUILD_DIR)/Release32
BUILD_DIR_RELEASE=$(BUILD_DIR)/Release
BUILD_DIR_DEFAULT=$(BUILD_DIR)/Default
BUILD_DIR_DEBUG=$(BUILD_DIR)/Debug
BUILD_OS := $(shell echo "$$OSTYPE")

##############################################################
# Options for cmake: define an explicit install directory if the command line provides a INSTALL_PREFIX variable
ifneq ($(INSTALL_PREFIX),)
	OPTION_INSTALL_PREFIX = -DCMAKE_INSTALL_PREFIX=$(INSTALL_PREFIX)
endif
ifneq ($(INSTALL_LIBDIR),)
	OPTION_INSTALL_LIBDIR = -DINSTALL_LIBDIR=$(INSTALL_LIBDIR)
endif
ifneq ($(INSTALL_DATADIR),)
	OPTION_INSTALL_DATADIR = -DINSTALL_DATADIR=$(INSTALL_DATADIR)
endif
# Options for cmake: set relocation directory, deactivate special warnings, for MSys32/MinGW32 environment Unix makefiles are created by default
ifeq ($(BUILD_OS),msys)
	CMAKE_OPTIONS= -DCMAKE_SKIP_RPATH:BOOL=ON -DRELOCATION_DIR=../../../../bin/ -Wno-dev -G "MSYS Makefiles" $(OPTION_INSTALL_PREFIX) ${OPTION_INSTALL_LIBDIR} ${OPTION_INSTALL_DATADIR}
else
	CMAKE_OPTIONS= -DCMAKE_SKIP_RPATH:BOOL=ON -DRELOCATION_DIR=../../../../bin/ -Wno-dev $(OPTION_INSTALL_PREFIX) ${OPTION_INSTALL_DATADIR}
endif
	
##############################################################
# build target mappings
all: default
        
package: release
        
##############################################################
clean:

cleaner:
	@echo "##### Deleting ALL build systems in $(TOP_DIR) #####"
	@rm -rf CMakeFiles
	@rm -f CMakeCache.txt
	@rm -rf $(TOP_DIR)/$(BUILD_DIR)

##############################################################
$(TOP_DIR)/$(BUILD_DIR):
	@mkdir -p $(TOP_DIR)/$(BUILD_DIR)

##############################################################
$(TOP_DIR)/$(BUILD_DIR_RELEASE32)/Makefile:
	@echo "##### Creating RELEASE32 build system in $(TOP_DIR) #####"
	@rm -rf CMakeFiles
	@rm -f CMakeCache.txt
	@mkdir -p $(TOP_DIR)/$(BUILD_DIR_RELEASE32)
	@cd $(TOP_DIR)/$(BUILD_DIR_RELEASE32) && cmake $(CMAKE_OPTIONS) -DBUILD=Release ../.. -DARCH_BITS="32"

$(TOP_DIR)/$(BUILD_DIR_RELEASE)/Makefile:
	@echo "##### Creating RELEASE build system in $(TOP_DIR) #####"
	@rm -rf CMakeFiles
	@rm -f CMakeCache.txt
	@mkdir -p $(TOP_DIR)/$(BUILD_DIR_RELEASE)
	@cd $(TOP_DIR)/$(BUILD_DIR_RELEASE) && cmake $(CMAKE_OPTIONS) -DBUILD=Release ../..

$(TOP_DIR)/$(BUILD_DIR_DEFAULT)/Makefile:
	@echo "##### Creating DEFAULT build system in $(TOP_DIR) #####"
	@rm -rf CMakeFiles
	@rm -f CMakeCache.txt
	@mkdir -p $(TOP_DIR)/$(BUILD_DIR_DEFAULT)
	@cd $(TOP_DIR)/$(BUILD_DIR_DEFAULT) && cmake $(CMAKE_OPTIONS) -DBUILD=Default ../..

$(TOP_DIR)/$(BUILD_DIR_DEBUG)/Makefile:
	@echo "##### Creating DEBUG build system in $(TOP_DIR) #####"
	@rm -rf CMakeFiles
	@rm -f CMakeCache.txt
	@mkdir -p $(TOP_DIR)/$(BUILD_DIR_DEBUG)
	@cd $(TOP_DIR)/$(BUILD_DIR_DEBUG) && cmake $(CMAKE_OPTIONS) -DBUILD=Debug ../..

##############################################################
# Makefile targets 


release32: $(TOP_DIR)/$(BUILD_DIR_RELEASE32)/Makefile
	@cd $(TOP_DIR)/$(BUILD_DIR_RELEASE32) && $(MAKE) -s

release: $(TOP_DIR)/$(BUILD_DIR_RELEASE)/Makefile
	@cd $(TOP_DIR)/$(BUILD_DIR_RELEASE) && $(MAKE) -s

default: $(TOP_DIR)/$(BUILD_DIR_DEFAULT)/Makefile
	@cd $(TOP_DIR)/$(BUILD_DIR_DEFAULT) && $(MAKE) -s

debug: $(TOP_DIR)/$(BUILD_DIR_DEBUG)/Makefile
	@cd $(TOP_DIR)/$(BUILD_DIR_DEBUG) && $(MAKE) -s

install: all
ifneq ($(INSTALL_PREFIX),)
	@echo "##### Installing to $(INSTALL_PREFIX)"
else
	@echo "##### Installing to default directory"
endif
	@cd $(TOP_DIR)/$(BUILD_DIR_DEFAULT) && $(MAKE) -s install
	
###############################################################################
# Targets for building a special sub target in one of our configurations 

%_release32: $(TOP_DIR)/$(BUILD_DIR_RELEASE32)/Makefile
	@cd $(TOP_DIR)/$(BUILD_DIR_RELEASE32) && $(MAKE) -s $*

%_release: $(TOP_DIR)/$(BUILD_DIR_RELEASE)/Makefile
	@cd $(TOP_DIR)/$(BUILD_DIR_RELEASE) && $(MAKE) -s $*

%_default: $(TOP_DIR)/$(BUILD_DIR_DEFAULT)/Makefile
	@cd $(TOP_DIR)/$(BUILD_DIR_DEFAULT) && $(MAKE) -s $*

%_debug: $(TOP_DIR)/$(BUILD_DIR_DEBUG)/Makefile
	@cd $(TOP_DIR)/$(BUILD_DIR_DEBUG) && $(MAKE) -s $*

###############################################################################
%MakeCore:
	@echo "MakeCore target ignored"

Makefile:
	@echo "Makefile as target is invalid"

###############################################################################
# catch all unhandled targets
%: 
ifneq ($(wildcard $(TOP_DIR)/$(BUILD_DIR_RELEASE)),) 
	@cd $(TOP_DIR)/$(BUILD_DIR_RELEASE) && $(MAKE) -s $*
endif
ifneq ($(wildcard $(TOP_DIR)/$(BUILD_DIR_DEFAULT)),) 
	@cd $(TOP_DIR)/$(BUILD_DIR_DEFAULT) && $(MAKE) -s $*
endif
ifneq ($(wildcard $(TOP_DIR)/$(BUILD_DIR_DEBUG)),) 
	@cd $(TOP_DIR)/$(BUILD_DIR_DEBUG) && $(MAKE) -s $*
endif

